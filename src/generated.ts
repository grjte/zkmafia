// Generated by @wagmi/cli@1.3.0 on 9/6/2023 at 5:06:58 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  useNetwork,
  Address,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'number',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'setNumber',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreABI = [
  { type: 'error', inputs: [], name: 'Semaphore__CallerIsNotTheGroupAdmin' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeDepthIsNotSupported',
  },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeRootIsExpired' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeRootIsNotPartOfTheGroup',
  },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__YouAreUsingTheSameNillifierTwice',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'GroupAdminUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupMerkleTreeDurationUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'nullifierHash',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'externalNullifier',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'signal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProofVerified',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'identityCommitments',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'addMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'depth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
      {
        name: 'merkleTreeRootDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'depth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'removeMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'newAdmin', internalType: 'address', type: 'address' },
    ],
    name: 'updateGroupAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'updateGroupMerkleTreeDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'updateMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphoreGroups
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreGroupsABI = [
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeDepth',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'zeroValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISemaphoreVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSemaphoreVerifierABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Feedback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const feedbackABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'semaphoreAddress', internalType: 'address', type: 'address' },
      { name: '_groupId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'groupId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'joinGroup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'semaphore',
    outputs: [
      { name: '', internalType: 'contract ISemaphore', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feedback', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'sendFeedback',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IncrementalBinaryTree
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const incrementalBinaryTreeABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_0',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_1',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_10',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_11',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_12',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_13',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_14',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_15',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_16',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_17',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_19',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_2',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_20',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_21',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_22',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_23',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_24',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_25',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_26',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_27',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_28',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_29',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_3',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_30',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_31',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_32',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_4',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_5',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_6',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_7',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_8',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Z_9',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'defaultZero',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pairing
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pairingABI = [
  { type: 'error', inputs: [], name: 'InvalidProof' },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'P1',
    outputs: [
      {
        name: '',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'P2',
    outputs: [
      {
        name: '',
        internalType: 'struct Pairing.G2Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
          { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p1',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'p2',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'addition',
    outputs: [
      {
        name: 'r',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'p',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'negate',
    outputs: [
      {
        name: 'r',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p1',
        internalType: 'struct Pairing.G1Point[]',
        type: 'tuple[]',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: 'p2',
        internalType: 'struct Pairing.G2Point[]',
        type: 'tuple[]',
        components: [
          { name: 'X', internalType: 'uint256[2]', type: 'uint256[2]' },
          { name: 'Y', internalType: 'uint256[2]', type: 'uint256[2]' },
        ],
      },
    ],
    name: 'pairingCheck',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'p',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 's', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'scalar_mul',
    outputs: [
      {
        name: 'r',
        internalType: 'struct Pairing.G1Point',
        type: 'tuple',
        components: [
          { name: 'X', internalType: 'uint256', type: 'uint256' },
          { name: 'Y', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PoseidonT3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const poseidonT3ABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256[2]', type: 'uint256[2]' }],
    name: 'hash',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Semaphore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_verifier',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'Semaphore__CallerIsNotTheGroupAdmin' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeDepthIsNotSupported',
  },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeRootIsExpired' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeRootIsNotPartOfTheGroup',
  },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__YouAreUsingTheSameNillifierTwice',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'GroupAdminUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeDepth',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'zeroValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupMerkleTreeDurationUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'nullifierHash',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'externalNullifier',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'signal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProofVerified',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'identityCommitments',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'addMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'groups',
    outputs: [
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDuration', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'removeMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'newAdmin', internalType: 'address', type: 'address' },
    ],
    name: 'updateGroupAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'updateGroupMerkleTreeDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'updateMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'verifier',
    outputs: [
      {
        name: '',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SemaphoreGroups
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreGroupsABI = [
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeDepth',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'zeroValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockSemaphore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockSemaphoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_verifier',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'Semaphore__CallerIsNotTheGroupAdmin' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupAlreadyExists' },
  { type: 'error', inputs: [], name: 'Semaphore__GroupDoesNotExist' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeDepthIsNotSupported',
  },
  { type: 'error', inputs: [], name: 'Semaphore__MerkleTreeRootIsExpired' },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__MerkleTreeRootIsNotPartOfTheGroup',
  },
  {
    type: 'error',
    inputs: [],
    name: 'Semaphore__YouAreUsingTheSameNillifierTwice',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'GroupAdminUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeDepth',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'zeroValue',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'oldMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'GroupMerkleTreeDurationUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'identityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MemberUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'groupId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'nullifierHash',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'externalNullifier',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'signal',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProofVerified',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'identityCommitments',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'addMembers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
      { name: 'admin', internalType: 'address', type: 'address' },
    ],
    name: 'createGroup',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeDepth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleTreeRoot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'groupId', internalType: 'uint256', type: 'uint256' }],
    name: 'getNumberOfMerkleTreeLeaves',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'groups',
    outputs: [
      { name: 'admin', internalType: 'address', type: 'address' },
      { name: 'merkleTreeDuration', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'removeMember',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'newAdmin', internalType: 'address', type: 'address' },
    ],
    name: 'updateGroupAdmin',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newMerkleTreeDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'updateGroupMerkleTreeDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      {
        name: 'newIdentityCommitment',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'proofSiblings', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'proofPathIndices', internalType: 'uint8[]', type: 'uint8[]' },
    ],
    name: 'updateMember',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'verifier',
    outputs: [
      {
        name: '',
        internalType: 'contract ISemaphoreVerifier',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'groupId', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IZKMafiaGame
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const izkMafiaGameABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'GameCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'roleHash',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PlayerRoleAdded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SemaphoreVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semaphoreVerifierABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'uint256[8]', type: 'uint256[8]' },
      { name: 'merkleTreeDepth', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'verifyProof',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ZKMafia
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export const zkMafiaABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'semaphoreAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'GameCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'roleHash',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PlayerRoleAdded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'isMafia', internalType: 'bool', type: 'bool' },
      { name: 'pubKey', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      {
        name: 'semaphoreProofSiblings',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      {
        name: 'semaphorePathIndices',
        internalType: 'uint8[]',
        type: 'uint8[]',
      },
      { name: 'proof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'announceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'pubKey', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createGame',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'endGame',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'getGameInfoForGameId',
    outputs: [
      {
        name: '',
        internalType: 'struct GameInfo',
        type: 'tuple',
        components: [
          { name: 'round', internalType: 'enum Round', type: 'uint8' },
          { name: 'previousRound', internalType: 'enum Round', type: 'uint8' },
          { name: 'numRounds', internalType: 'uint256', type: 'uint256' },
          { name: 'aggregateKey', internalType: 'uint256', type: 'uint256' },
          { name: 'mafiaCounter', internalType: 'uint8', type: 'uint8' },
          { name: 'roles', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'players', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'status', internalType: 'enum Status[]', type: 'uint8[]' },
          {
            name: 'validActionsTable',
            internalType: 'struct ValidAction[]',
            type: 'tuple[]',
            components: [
              { name: 'role', internalType: 'uint256', type: 'uint256' },
              { name: 'target', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'identityCommitment', internalType: 'uint256', type: 'uint256' },
      { name: 'pubKey', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'joinGame',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'semaphoreProof',
        internalType: 'uint256[8]',
        type: 'uint256[8]',
      },
      { name: 'playerProof', internalType: 'bytes', type: 'bytes' },
      { name: 'role', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'privateRound',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'signal', internalType: 'uint256', type: 'uint256' },
      {
        name: 'semaphoreProof',
        internalType: 'uint256[8]',
        type: 'uint256[8]',
      },
      { name: 'merkleTreeRoot', internalType: 'uint256', type: 'uint256' },
      { name: 'nullifierHash', internalType: 'uint256', type: 'uint256' },
      { name: 'externalNullifier', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'publicRound',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubKey', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'bytes', type: 'bytes' },
      {
        name: 'newEncryptedRoles',
        internalType: 'bytes32[12]',
        type: 'bytes32[12]',
      },
    ],
    name: 'publishShuffle',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'pubKey', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'bytes', type: 'bytes' },
      {
        name: 'newDecryptedRoles',
        internalType: 'bytes32[12]',
        type: 'bytes32[12]',
      },
    ],
    name: 'revealRoles',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'gameId', internalType: 'uint256', type: 'uint256' },
      { name: 'aggregateKey', internalType: 'uint256', type: 'uint256' },
      { name: 'proof', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'startGame',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export const zkMafiaAddress = {
  1: '0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac',
  5: '0x78991BB1D194C1235fe285240af8489CFA552151',
  31337: '0xbe18A1B61ceaF59aEB6A9bC81AB4FB87D56Ba167',
} as const

/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export const zkMafiaConfig = {
  address: zkMafiaAddress,
  abi: zkMafiaABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ZKMafiaGame
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const zkMafiaGameABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'GameCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'gameId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'roleHash',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'merkleTreeRoot',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PlayerRoleAdded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'gameId', internalType: 'uint256', type: 'uint256' }],
    name: 'getGameInfoForGameId',
    outputs: [
      {
        name: '',
        internalType: 'struct GameInfo',
        type: 'tuple',
        components: [
          { name: 'round', internalType: 'enum Round', type: 'uint8' },
          { name: 'previousRound', internalType: 'enum Round', type: 'uint8' },
          { name: 'numRounds', internalType: 'uint256', type: 'uint256' },
          { name: 'aggregateKey', internalType: 'uint256', type: 'uint256' },
          { name: 'mafiaCounter', internalType: 'uint8', type: 'uint8' },
          { name: 'roles', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'players', internalType: 'uint256[]', type: 'uint256[]' },
          { name: 'status', internalType: 'enum Status[]', type: 'uint8[]' },
          {
            name: 'validActionsTable',
            internalType: 'struct ValidAction[]',
            type: 'tuple[]',
            components: [
              { name: 'role', internalType: 'uint256', type: 'uint256' },
              { name: 'target', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 */
export function useCounterNumber<
  TFunctionName extends 'number',
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    functionName: 'number',
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof counterABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof counterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, TFunctionName, TMode>({
    abi: counterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'increment'
        >['request']['abi'],
        'increment',
        TMode
      > & { functionName?: 'increment' }
    : UseContractWriteConfig<typeof counterABI, 'increment', TMode> & {
        abi?: never
        functionName?: 'increment'
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, 'increment', TMode>({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'setNumber'
        >['request']['abi'],
        'setNumber',
        TMode
      > & { functionName?: 'setNumber' }
    : UseContractWriteConfig<typeof counterABI, 'setNumber', TMode> & {
        abi?: never
        functionName?: 'setNumber'
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, 'setNumber', TMode>({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'increment'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'increment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    ...config,
  } as UseContractEventConfig<typeof counterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCounterTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof counterABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof counterABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__.
 */
export function useISemaphoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iSemaphoreABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, TFunctionName, TMode>({
    abi: iSemaphoreABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function useISemaphoreAddMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'addMember'
        >['request']['abi'],
        'addMember',
        TMode
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'addMember', TMode> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'addMember', TMode>({
    abi: iSemaphoreABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function useISemaphoreAddMembers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'addMembers'
        >['request']['abi'],
        'addMembers',
        TMode
      > & { functionName?: 'addMembers' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'addMembers', TMode> & {
        abi?: never
        functionName?: 'addMembers'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'addMembers', TMode>({
    abi: iSemaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function useISemaphoreCreateGroup<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'createGroup'
        >['request']['abi'],
        'createGroup',
        TMode
      > & { functionName?: 'createGroup' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'createGroup', TMode> & {
        abi?: never
        functionName?: 'createGroup'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'createGroup', TMode>({
    abi: iSemaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function useISemaphoreRemoveMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'removeMember'
        >['request']['abi'],
        'removeMember',
        TMode
      > & { functionName?: 'removeMember' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'removeMember', TMode> & {
        abi?: never
        functionName?: 'removeMember'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'removeMember', TMode>({
    abi: iSemaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function useISemaphoreUpdateGroupAdmin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'updateGroupAdmin'
        >['request']['abi'],
        'updateGroupAdmin',
        TMode
      > & { functionName?: 'updateGroupAdmin' }
    : UseContractWriteConfig<
        typeof iSemaphoreABI,
        'updateGroupAdmin',
        TMode
      > & {
        abi?: never
        functionName?: 'updateGroupAdmin'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'updateGroupAdmin', TMode>({
    abi: iSemaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function useISemaphoreUpdateGroupMerkleTreeDuration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'updateGroupMerkleTreeDuration'
        >['request']['abi'],
        'updateGroupMerkleTreeDuration',
        TMode
      > & { functionName?: 'updateGroupMerkleTreeDuration' }
    : UseContractWriteConfig<
        typeof iSemaphoreABI,
        'updateGroupMerkleTreeDuration',
        TMode
      > & {
        abi?: never
        functionName?: 'updateGroupMerkleTreeDuration'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSemaphoreABI,
    'updateGroupMerkleTreeDuration',
    TMode
  >({
    abi: iSemaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function useISemaphoreUpdateMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'updateMember'
        >['request']['abi'],
        'updateMember',
        TMode
      > & { functionName?: 'updateMember' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'updateMember', TMode> & {
        abi?: never
        functionName?: 'updateMember'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'updateMember', TMode>({
    abi: iSemaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useISemaphoreVerifyProof<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSemaphoreABI,
          'verifyProof'
        >['request']['abi'],
        'verifyProof',
        TMode
      > & { functionName?: 'verifyProof' }
    : UseContractWriteConfig<typeof iSemaphoreABI, 'verifyProof', TMode> & {
        abi?: never
        functionName?: 'verifyProof'
      } = {} as any,
) {
  return useContractWrite<typeof iSemaphoreABI, 'verifyProof', TMode>({
    abi: iSemaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__.
 */
export function usePrepareISemaphoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareISemaphoreAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function usePrepareISemaphoreAddMembers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMembers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'addMembers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function usePrepareISemaphoreCreateGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'createGroup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'createGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePrepareISemaphoreRemoveMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'removeMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'removeMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function usePrepareISemaphoreUpdateGroupAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateGroupAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateGroupAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function usePrepareISemaphoreUpdateGroupMerkleTreeDuration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSemaphoreABI,
      'updateGroupMerkleTreeDuration'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSemaphoreABI,
    'updateGroupMerkleTreeDuration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function usePrepareISemaphoreUpdateMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'updateMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSemaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function usePrepareISemaphoreVerifyProof(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'verifyProof'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSemaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSemaphoreABI, 'verifyProof'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__.
 */
export function useISemaphoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreABI,
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__ and `eventName` set to `"GroupAdminUpdated"`.
 */
export function useISemaphoreGroupAdminUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreABI, 'GroupAdminUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreABI,
    eventName: 'GroupAdminUpdated',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreABI, 'GroupAdminUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__ and `eventName` set to `"GroupMerkleTreeDurationUpdated"`.
 */
export function useISemaphoreGroupMerkleTreeDurationUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iSemaphoreABI,
      'GroupMerkleTreeDurationUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreABI,
    eventName: 'GroupMerkleTreeDurationUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iSemaphoreABI,
    'GroupMerkleTreeDurationUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreABI}__ and `eventName` set to `"ProofVerified"`.
 */
export function useISemaphoreProofVerifiedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreABI, 'ProofVerified'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreABI,
    eventName: 'ProofVerified',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreABI, 'ProofVerified'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__.
 */
export function useISemaphoreGroupsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreGroupsABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useISemaphoreGroupsGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreGroupsABI,
    functionName: 'getMerkleTreeDepth',
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useISemaphoreGroupsGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreGroupsABI,
    functionName: 'getMerkleTreeRoot',
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useISemaphoreGroupsGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof iSemaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreGroupsABI,
    functionName: 'getNumberOfMerkleTreeLeaves',
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__.
 */
export function useISemaphoreGroupsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useISemaphoreGroupsGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useISemaphoreGroupsMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useISemaphoreGroupsMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSemaphoreGroupsABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useISemaphoreGroupsMemberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSemaphoreGroupsABI,
    eventName: 'MemberUpdated',
    ...config,
  } as UseContractEventConfig<typeof iSemaphoreGroupsABI, 'MemberUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreVerifierABI}__.
 */
export function useISemaphoreVerifierRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSemaphoreVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreVerifierABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreVerifierABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSemaphoreVerifierABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useISemaphoreVerifierVerifyProof<
  TFunctionName extends 'verifyProof',
  TSelectData = ReadContractResult<typeof iSemaphoreVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSemaphoreVerifierABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSemaphoreVerifierABI,
    functionName: 'verifyProof',
    ...config,
  } as UseContractReadConfig<
    typeof iSemaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feedbackABI}__.
 */
export function useFeedbackRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof feedbackABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof feedbackABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: feedbackABI,
    ...config,
  } as UseContractReadConfig<typeof feedbackABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feedbackABI}__ and `functionName` set to `"groupId"`.
 */
export function useFeedbackGroupId<
  TFunctionName extends 'groupId',
  TSelectData = ReadContractResult<typeof feedbackABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof feedbackABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feedbackABI,
    functionName: 'groupId',
    ...config,
  } as UseContractReadConfig<typeof feedbackABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feedbackABI}__ and `functionName` set to `"semaphore"`.
 */
export function useFeedbackSemaphore<
  TFunctionName extends 'semaphore',
  TSelectData = ReadContractResult<typeof feedbackABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof feedbackABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: feedbackABI,
    functionName: 'semaphore',
    ...config,
  } as UseContractReadConfig<typeof feedbackABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feedbackABI}__.
 */
export function useFeedbackWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof feedbackABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof feedbackABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof feedbackABI, TFunctionName, TMode>({
    abi: feedbackABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feedbackABI}__ and `functionName` set to `"joinGroup"`.
 */
export function useFeedbackJoinGroup<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof feedbackABI,
          'joinGroup'
        >['request']['abi'],
        'joinGroup',
        TMode
      > & { functionName?: 'joinGroup' }
    : UseContractWriteConfig<typeof feedbackABI, 'joinGroup', TMode> & {
        abi?: never
        functionName?: 'joinGroup'
      } = {} as any,
) {
  return useContractWrite<typeof feedbackABI, 'joinGroup', TMode>({
    abi: feedbackABI,
    functionName: 'joinGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feedbackABI}__ and `functionName` set to `"sendFeedback"`.
 */
export function useFeedbackSendFeedback<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof feedbackABI,
          'sendFeedback'
        >['request']['abi'],
        'sendFeedback',
        TMode
      > & { functionName?: 'sendFeedback' }
    : UseContractWriteConfig<typeof feedbackABI, 'sendFeedback', TMode> & {
        abi?: never
        functionName?: 'sendFeedback'
      } = {} as any,
) {
  return useContractWrite<typeof feedbackABI, 'sendFeedback', TMode>({
    abi: feedbackABI,
    functionName: 'sendFeedback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feedbackABI}__.
 */
export function usePrepareFeedbackWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feedbackABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feedbackABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof feedbackABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feedbackABI}__ and `functionName` set to `"joinGroup"`.
 */
export function usePrepareFeedbackJoinGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feedbackABI, 'joinGroup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feedbackABI,
    functionName: 'joinGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feedbackABI, 'joinGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feedbackABI}__ and `functionName` set to `"sendFeedback"`.
 */
export function usePrepareFeedbackSendFeedback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feedbackABI, 'sendFeedback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: feedbackABI,
    functionName: 'sendFeedback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feedbackABI, 'sendFeedback'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__.
 */
export function useIncrementalBinaryTreeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_0"`.
 */
export function useIncrementalBinaryTreeZ_0<
  TFunctionName extends 'Z_0',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_0',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_1"`.
 */
export function useIncrementalBinaryTreeZ_1<
  TFunctionName extends 'Z_1',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_1',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_10"`.
 */
export function useIncrementalBinaryTreeZ_10<
  TFunctionName extends 'Z_10',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_10',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_11"`.
 */
export function useIncrementalBinaryTreeZ_11<
  TFunctionName extends 'Z_11',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_11',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_12"`.
 */
export function useIncrementalBinaryTreeZ_12<
  TFunctionName extends 'Z_12',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_12',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_13"`.
 */
export function useIncrementalBinaryTreeZ_13<
  TFunctionName extends 'Z_13',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_13',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_14"`.
 */
export function useIncrementalBinaryTreeZ_14<
  TFunctionName extends 'Z_14',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_14',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_15"`.
 */
export function useIncrementalBinaryTreeZ_15<
  TFunctionName extends 'Z_15',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_15',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_16"`.
 */
export function useIncrementalBinaryTreeZ_16<
  TFunctionName extends 'Z_16',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_16',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_17"`.
 */
export function useIncrementalBinaryTreeZ_17<
  TFunctionName extends 'Z_17',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_17',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_18"`.
 */
export function useIncrementalBinaryTreeZ_18<
  TFunctionName extends 'Z_18',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_18',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_19"`.
 */
export function useIncrementalBinaryTreeZ_19<
  TFunctionName extends 'Z_19',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_19',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_2"`.
 */
export function useIncrementalBinaryTreeZ_2<
  TFunctionName extends 'Z_2',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_2',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_20"`.
 */
export function useIncrementalBinaryTreeZ_20<
  TFunctionName extends 'Z_20',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_20',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_21"`.
 */
export function useIncrementalBinaryTreeZ_21<
  TFunctionName extends 'Z_21',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_21',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_22"`.
 */
export function useIncrementalBinaryTreeZ_22<
  TFunctionName extends 'Z_22',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_22',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_23"`.
 */
export function useIncrementalBinaryTreeZ_23<
  TFunctionName extends 'Z_23',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_23',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_24"`.
 */
export function useIncrementalBinaryTreeZ_24<
  TFunctionName extends 'Z_24',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_24',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_25"`.
 */
export function useIncrementalBinaryTreeZ_25<
  TFunctionName extends 'Z_25',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_25',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_26"`.
 */
export function useIncrementalBinaryTreeZ_26<
  TFunctionName extends 'Z_26',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_26',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_27"`.
 */
export function useIncrementalBinaryTreeZ_27<
  TFunctionName extends 'Z_27',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_27',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_28"`.
 */
export function useIncrementalBinaryTreeZ_28<
  TFunctionName extends 'Z_28',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_28',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_29"`.
 */
export function useIncrementalBinaryTreeZ_29<
  TFunctionName extends 'Z_29',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_29',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_3"`.
 */
export function useIncrementalBinaryTreeZ_3<
  TFunctionName extends 'Z_3',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_3',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_30"`.
 */
export function useIncrementalBinaryTreeZ_30<
  TFunctionName extends 'Z_30',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_30',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_31"`.
 */
export function useIncrementalBinaryTreeZ_31<
  TFunctionName extends 'Z_31',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_31',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_32"`.
 */
export function useIncrementalBinaryTreeZ_32<
  TFunctionName extends 'Z_32',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_32',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_4"`.
 */
export function useIncrementalBinaryTreeZ_4<
  TFunctionName extends 'Z_4',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_4',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_5"`.
 */
export function useIncrementalBinaryTreeZ_5<
  TFunctionName extends 'Z_5',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_5',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_6"`.
 */
export function useIncrementalBinaryTreeZ_6<
  TFunctionName extends 'Z_6',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_6',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_7"`.
 */
export function useIncrementalBinaryTreeZ_7<
  TFunctionName extends 'Z_7',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_7',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_8"`.
 */
export function useIncrementalBinaryTreeZ_8<
  TFunctionName extends 'Z_8',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_8',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"Z_9"`.
 */
export function useIncrementalBinaryTreeZ_9<
  TFunctionName extends 'Z_9',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'Z_9',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link incrementalBinaryTreeABI}__ and `functionName` set to `"defaultZero"`.
 */
export function useIncrementalBinaryTreeDefaultZero<
  TFunctionName extends 'defaultZero',
  TSelectData = ReadContractResult<
    typeof incrementalBinaryTreeABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof incrementalBinaryTreeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: incrementalBinaryTreeABI,
    functionName: 'defaultZero',
    ...config,
  } as UseContractReadConfig<
    typeof incrementalBinaryTreeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__.
 */
export function usePairingRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"P1"`.
 */
export function usePairingP1<
  TFunctionName extends 'P1',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'P1',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"P2"`.
 */
export function usePairingP2<
  TFunctionName extends 'P2',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'P2',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"addition"`.
 */
export function usePairingAddition<
  TFunctionName extends 'addition',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'addition',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"negate"`.
 */
export function usePairingNegate<
  TFunctionName extends 'negate',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'negate',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"pairingCheck"`.
 */
export function usePairingPairingCheck<
  TFunctionName extends 'pairingCheck',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'pairingCheck',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairingABI}__ and `functionName` set to `"scalar_mul"`.
 */
export function usePairingScalarMul<
  TFunctionName extends 'scalar_mul',
  TSelectData = ReadContractResult<typeof pairingABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairingABI,
    functionName: 'scalar_mul',
    ...config,
  } as UseContractReadConfig<typeof pairingABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT3ABI}__.
 */
export function usePoseidonT3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof poseidonT3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonT3ABI,
    ...config,
  } as UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link poseidonT3ABI}__ and `functionName` set to `"hash"`.
 */
export function usePoseidonT3Hash<
  TFunctionName extends 'hash',
  TSelectData = ReadContractResult<typeof poseidonT3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: poseidonT3ABI,
    functionName: 'hash',
    ...config,
  } as UseContractReadConfig<typeof poseidonT3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function useSemaphoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useSemaphoreGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'getMerkleTreeDepth',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useSemaphoreGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'getMerkleTreeRoot',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useSemaphoreGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'getNumberOfMerkleTreeLeaves',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"groups"`.
 */
export function useSemaphoreGroups<
  TFunctionName extends 'groups',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'groups',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"verifier"`.
 */
export function useSemaphoreVerifier<
  TFunctionName extends 'verifier',
  TSelectData = ReadContractResult<typeof semaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreABI,
    functionName: 'verifier',
    ...config,
  } as UseContractReadConfig<typeof semaphoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function useSemaphoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof semaphoreABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, TFunctionName, TMode>({
    abi: semaphoreABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function useSemaphoreAddMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'addMember'
        >['request']['abi'],
        'addMember',
        TMode
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<typeof semaphoreABI, 'addMember', TMode> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'addMember', TMode>({
    abi: semaphoreABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function useSemaphoreAddMembers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'addMembers'
        >['request']['abi'],
        'addMembers',
        TMode
      > & { functionName?: 'addMembers' }
    : UseContractWriteConfig<typeof semaphoreABI, 'addMembers', TMode> & {
        abi?: never
        functionName?: 'addMembers'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'addMembers', TMode>({
    abi: semaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function useSemaphoreCreateGroup<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'createGroup'
        >['request']['abi'],
        'createGroup',
        TMode
      > & { functionName?: 'createGroup' }
    : UseContractWriteConfig<typeof semaphoreABI, 'createGroup', TMode> & {
        abi?: never
        functionName?: 'createGroup'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'createGroup', TMode>({
    abi: semaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function useSemaphoreRemoveMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'removeMember'
        >['request']['abi'],
        'removeMember',
        TMode
      > & { functionName?: 'removeMember' }
    : UseContractWriteConfig<typeof semaphoreABI, 'removeMember', TMode> & {
        abi?: never
        functionName?: 'removeMember'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'removeMember', TMode>({
    abi: semaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function useSemaphoreUpdateGroupAdmin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'updateGroupAdmin'
        >['request']['abi'],
        'updateGroupAdmin',
        TMode
      > & { functionName?: 'updateGroupAdmin' }
    : UseContractWriteConfig<typeof semaphoreABI, 'updateGroupAdmin', TMode> & {
        abi?: never
        functionName?: 'updateGroupAdmin'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'updateGroupAdmin', TMode>({
    abi: semaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function useSemaphoreUpdateGroupMerkleTreeDuration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'updateGroupMerkleTreeDuration'
        >['request']['abi'],
        'updateGroupMerkleTreeDuration',
        TMode
      > & { functionName?: 'updateGroupMerkleTreeDuration' }
    : UseContractWriteConfig<
        typeof semaphoreABI,
        'updateGroupMerkleTreeDuration',
        TMode
      > & {
        abi?: never
        functionName?: 'updateGroupMerkleTreeDuration'
      } = {} as any,
) {
  return useContractWrite<
    typeof semaphoreABI,
    'updateGroupMerkleTreeDuration',
    TMode
  >({
    abi: semaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function useSemaphoreUpdateMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'updateMember'
        >['request']['abi'],
        'updateMember',
        TMode
      > & { functionName?: 'updateMember' }
    : UseContractWriteConfig<typeof semaphoreABI, 'updateMember', TMode> & {
        abi?: never
        functionName?: 'updateMember'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'updateMember', TMode>({
    abi: semaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useSemaphoreVerifyProof<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof semaphoreABI,
          'verifyProof'
        >['request']['abi'],
        'verifyProof',
        TMode
      > & { functionName?: 'verifyProof' }
    : UseContractWriteConfig<typeof semaphoreABI, 'verifyProof', TMode> & {
        abi?: never
        functionName?: 'verifyProof'
      } = {} as any,
) {
  return useContractWrite<typeof semaphoreABI, 'verifyProof', TMode>({
    abi: semaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function usePrepareSemaphoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareSemaphoreAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function usePrepareSemaphoreAddMembers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMembers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'addMembers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function usePrepareSemaphoreCreateGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'createGroup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'createGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePrepareSemaphoreRemoveMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'removeMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'removeMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function usePrepareSemaphoreUpdateGroupAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateGroupAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateGroupAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function usePrepareSemaphoreUpdateGroupMerkleTreeDuration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof semaphoreABI,
      'updateGroupMerkleTreeDuration'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof semaphoreABI,
    'updateGroupMerkleTreeDuration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function usePrepareSemaphoreUpdateMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'updateMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function usePrepareSemaphoreVerifyProof(
  config: Omit<
    UsePrepareContractWriteConfig<typeof semaphoreABI, 'verifyProof'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: semaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as UsePrepareContractWriteConfig<typeof semaphoreABI, 'verifyProof'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__.
 */
export function useSemaphoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"GroupAdminUpdated"`.
 */
export function useSemaphoreGroupAdminUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'GroupAdminUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'GroupAdminUpdated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'GroupAdminUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useSemaphoreGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"GroupMerkleTreeDurationUpdated"`.
 */
export function useSemaphoreGroupMerkleTreeDurationUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof semaphoreABI,
      'GroupMerkleTreeDurationUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'GroupMerkleTreeDurationUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof semaphoreABI,
    'GroupMerkleTreeDurationUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useSemaphoreMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useSemaphoreMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'MemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useSemaphoreMemberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'MemberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'MemberUpdated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'MemberUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreABI}__ and `eventName` set to `"ProofVerified"`.
 */
export function useSemaphoreProofVerifiedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreABI, 'ProofVerified'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreABI,
    eventName: 'ProofVerified',
    ...config,
  } as UseContractEventConfig<typeof semaphoreABI, 'ProofVerified'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__.
 */
export function useSemaphoreGroupsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreGroupsABI,
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useSemaphoreGroupsGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreGroupsABI,
    functionName: 'getMerkleTreeDepth',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useSemaphoreGroupsGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreGroupsABI,
    functionName: 'getMerkleTreeRoot',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useSemaphoreGroupsGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof semaphoreGroupsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreGroupsABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreGroupsABI,
    functionName: 'getNumberOfMerkleTreeLeaves',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreGroupsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__.
 */
export function useSemaphoreGroupsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useSemaphoreGroupsGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useSemaphoreGroupsMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useSemaphoreGroupsMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semaphoreGroupsABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useSemaphoreGroupsMemberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: semaphoreGroupsABI,
    eventName: 'MemberUpdated',
    ...config,
  } as UseContractEventConfig<typeof semaphoreGroupsABI, 'MemberUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockSemaphoreABI}__.
 */
export function useMockSemaphoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockSemaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockSemaphoreABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: mockSemaphoreABI,
    ...config,
  } as UseContractReadConfig<
    typeof mockSemaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"getMerkleTreeDepth"`.
 */
export function useMockSemaphoreGetMerkleTreeDepth<
  TFunctionName extends 'getMerkleTreeDepth',
  TSelectData = ReadContractResult<typeof mockSemaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockSemaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockSemaphoreABI,
    functionName: 'getMerkleTreeDepth',
    ...config,
  } as UseContractReadConfig<
    typeof mockSemaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"getMerkleTreeRoot"`.
 */
export function useMockSemaphoreGetMerkleTreeRoot<
  TFunctionName extends 'getMerkleTreeRoot',
  TSelectData = ReadContractResult<typeof mockSemaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockSemaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockSemaphoreABI,
    functionName: 'getMerkleTreeRoot',
    ...config,
  } as UseContractReadConfig<
    typeof mockSemaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"getNumberOfMerkleTreeLeaves"`.
 */
export function useMockSemaphoreGetNumberOfMerkleTreeLeaves<
  TFunctionName extends 'getNumberOfMerkleTreeLeaves',
  TSelectData = ReadContractResult<typeof mockSemaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockSemaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockSemaphoreABI,
    functionName: 'getNumberOfMerkleTreeLeaves',
    ...config,
  } as UseContractReadConfig<
    typeof mockSemaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"groups"`.
 */
export function useMockSemaphoreGroups<
  TFunctionName extends 'groups',
  TSelectData = ReadContractResult<typeof mockSemaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockSemaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockSemaphoreABI,
    functionName: 'groups',
    ...config,
  } as UseContractReadConfig<
    typeof mockSemaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"verifier"`.
 */
export function useMockSemaphoreVerifier<
  TFunctionName extends 'verifier',
  TSelectData = ReadContractResult<typeof mockSemaphoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockSemaphoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockSemaphoreABI,
    functionName: 'verifier',
    ...config,
  } as UseContractReadConfig<
    typeof mockSemaphoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__.
 */
export function useMockSemaphoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockSemaphoreABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof mockSemaphoreABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof mockSemaphoreABI, TFunctionName, TMode>({
    abi: mockSemaphoreABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function useMockSemaphoreAddMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockSemaphoreABI,
          'addMember'
        >['request']['abi'],
        'addMember',
        TMode
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<typeof mockSemaphoreABI, 'addMember', TMode> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any,
) {
  return useContractWrite<typeof mockSemaphoreABI, 'addMember', TMode>({
    abi: mockSemaphoreABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function useMockSemaphoreAddMembers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockSemaphoreABI,
          'addMembers'
        >['request']['abi'],
        'addMembers',
        TMode
      > & { functionName?: 'addMembers' }
    : UseContractWriteConfig<typeof mockSemaphoreABI, 'addMembers', TMode> & {
        abi?: never
        functionName?: 'addMembers'
      } = {} as any,
) {
  return useContractWrite<typeof mockSemaphoreABI, 'addMembers', TMode>({
    abi: mockSemaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function useMockSemaphoreCreateGroup<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockSemaphoreABI,
          'createGroup'
        >['request']['abi'],
        'createGroup',
        TMode
      > & { functionName?: 'createGroup' }
    : UseContractWriteConfig<typeof mockSemaphoreABI, 'createGroup', TMode> & {
        abi?: never
        functionName?: 'createGroup'
      } = {} as any,
) {
  return useContractWrite<typeof mockSemaphoreABI, 'createGroup', TMode>({
    abi: mockSemaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function useMockSemaphoreRemoveMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockSemaphoreABI,
          'removeMember'
        >['request']['abi'],
        'removeMember',
        TMode
      > & { functionName?: 'removeMember' }
    : UseContractWriteConfig<typeof mockSemaphoreABI, 'removeMember', TMode> & {
        abi?: never
        functionName?: 'removeMember'
      } = {} as any,
) {
  return useContractWrite<typeof mockSemaphoreABI, 'removeMember', TMode>({
    abi: mockSemaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function useMockSemaphoreUpdateGroupAdmin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockSemaphoreABI,
          'updateGroupAdmin'
        >['request']['abi'],
        'updateGroupAdmin',
        TMode
      > & { functionName?: 'updateGroupAdmin' }
    : UseContractWriteConfig<
        typeof mockSemaphoreABI,
        'updateGroupAdmin',
        TMode
      > & {
        abi?: never
        functionName?: 'updateGroupAdmin'
      } = {} as any,
) {
  return useContractWrite<typeof mockSemaphoreABI, 'updateGroupAdmin', TMode>({
    abi: mockSemaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function useMockSemaphoreUpdateGroupMerkleTreeDuration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockSemaphoreABI,
          'updateGroupMerkleTreeDuration'
        >['request']['abi'],
        'updateGroupMerkleTreeDuration',
        TMode
      > & { functionName?: 'updateGroupMerkleTreeDuration' }
    : UseContractWriteConfig<
        typeof mockSemaphoreABI,
        'updateGroupMerkleTreeDuration',
        TMode
      > & {
        abi?: never
        functionName?: 'updateGroupMerkleTreeDuration'
      } = {} as any,
) {
  return useContractWrite<
    typeof mockSemaphoreABI,
    'updateGroupMerkleTreeDuration',
    TMode
  >({
    abi: mockSemaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function useMockSemaphoreUpdateMember<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockSemaphoreABI,
          'updateMember'
        >['request']['abi'],
        'updateMember',
        TMode
      > & { functionName?: 'updateMember' }
    : UseContractWriteConfig<typeof mockSemaphoreABI, 'updateMember', TMode> & {
        abi?: never
        functionName?: 'updateMember'
      } = {} as any,
) {
  return useContractWrite<typeof mockSemaphoreABI, 'updateMember', TMode>({
    abi: mockSemaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useMockSemaphoreVerifyProof<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockSemaphoreABI,
          'verifyProof'
        >['request']['abi'],
        'verifyProof',
        TMode
      > & { functionName?: 'verifyProof' }
    : UseContractWriteConfig<typeof mockSemaphoreABI, 'verifyProof', TMode> & {
        abi?: never
        functionName?: 'verifyProof'
      } = {} as any,
) {
  return useContractWrite<typeof mockSemaphoreABI, 'verifyProof', TMode>({
    abi: mockSemaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__.
 */
export function usePrepareMockSemaphoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockSemaphoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockSemaphoreABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockSemaphoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareMockSemaphoreAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockSemaphoreABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"addMembers"`.
 */
export function usePrepareMockSemaphoreAddMembers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'addMembers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockSemaphoreABI,
    functionName: 'addMembers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'addMembers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"createGroup"`.
 */
export function usePrepareMockSemaphoreCreateGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'createGroup'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockSemaphoreABI,
    functionName: 'createGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'createGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePrepareMockSemaphoreRemoveMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'removeMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockSemaphoreABI,
    functionName: 'removeMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'removeMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"updateGroupAdmin"`.
 */
export function usePrepareMockSemaphoreUpdateGroupAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'updateGroupAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockSemaphoreABI,
    functionName: 'updateGroupAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockSemaphoreABI,
    'updateGroupAdmin'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"updateGroupMerkleTreeDuration"`.
 */
export function usePrepareMockSemaphoreUpdateGroupMerkleTreeDuration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof mockSemaphoreABI,
      'updateGroupMerkleTreeDuration'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockSemaphoreABI,
    functionName: 'updateGroupMerkleTreeDuration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof mockSemaphoreABI,
    'updateGroupMerkleTreeDuration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"updateMember"`.
 */
export function usePrepareMockSemaphoreUpdateMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'updateMember'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockSemaphoreABI,
    functionName: 'updateMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'updateMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockSemaphoreABI}__ and `functionName` set to `"verifyProof"`.
 */
export function usePrepareMockSemaphoreVerifyProof(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'verifyProof'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockSemaphoreABI,
    functionName: 'verifyProof',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockSemaphoreABI, 'verifyProof'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockSemaphoreABI}__.
 */
export function useMockSemaphoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockSemaphoreABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockSemaphoreABI,
    ...config,
  } as UseContractEventConfig<typeof mockSemaphoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockSemaphoreABI}__ and `eventName` set to `"GroupAdminUpdated"`.
 */
export function useMockSemaphoreGroupAdminUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockSemaphoreABI, 'GroupAdminUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockSemaphoreABI,
    eventName: 'GroupAdminUpdated',
    ...config,
  } as UseContractEventConfig<typeof mockSemaphoreABI, 'GroupAdminUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockSemaphoreABI}__ and `eventName` set to `"GroupCreated"`.
 */
export function useMockSemaphoreGroupCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockSemaphoreABI, 'GroupCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockSemaphoreABI,
    eventName: 'GroupCreated',
    ...config,
  } as UseContractEventConfig<typeof mockSemaphoreABI, 'GroupCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockSemaphoreABI}__ and `eventName` set to `"GroupMerkleTreeDurationUpdated"`.
 */
export function useMockSemaphoreGroupMerkleTreeDurationUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof mockSemaphoreABI,
      'GroupMerkleTreeDurationUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockSemaphoreABI,
    eventName: 'GroupMerkleTreeDurationUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof mockSemaphoreABI,
    'GroupMerkleTreeDurationUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockSemaphoreABI}__ and `eventName` set to `"MemberAdded"`.
 */
export function useMockSemaphoreMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockSemaphoreABI, 'MemberAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockSemaphoreABI,
    eventName: 'MemberAdded',
    ...config,
  } as UseContractEventConfig<typeof mockSemaphoreABI, 'MemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockSemaphoreABI}__ and `eventName` set to `"MemberRemoved"`.
 */
export function useMockSemaphoreMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockSemaphoreABI, 'MemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockSemaphoreABI,
    eventName: 'MemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof mockSemaphoreABI, 'MemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockSemaphoreABI}__ and `eventName` set to `"MemberUpdated"`.
 */
export function useMockSemaphoreMemberUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockSemaphoreABI, 'MemberUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockSemaphoreABI,
    eventName: 'MemberUpdated',
    ...config,
  } as UseContractEventConfig<typeof mockSemaphoreABI, 'MemberUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockSemaphoreABI}__ and `eventName` set to `"ProofVerified"`.
 */
export function useMockSemaphoreProofVerifiedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockSemaphoreABI, 'ProofVerified'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockSemaphoreABI,
    eventName: 'ProofVerified',
    ...config,
  } as UseContractEventConfig<typeof mockSemaphoreABI, 'ProofVerified'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link izkMafiaGameABI}__.
 */
export function useIzkMafiaGameEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof izkMafiaGameABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: izkMafiaGameABI,
    ...config,
  } as UseContractEventConfig<typeof izkMafiaGameABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link izkMafiaGameABI}__ and `eventName` set to `"GameCreated"`.
 */
export function useIzkMafiaGameGameCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof izkMafiaGameABI, 'GameCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: izkMafiaGameABI,
    eventName: 'GameCreated',
    ...config,
  } as UseContractEventConfig<typeof izkMafiaGameABI, 'GameCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link izkMafiaGameABI}__ and `eventName` set to `"PlayerRoleAdded"`.
 */
export function useIzkMafiaGamePlayerRoleAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof izkMafiaGameABI, 'PlayerRoleAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: izkMafiaGameABI,
    eventName: 'PlayerRoleAdded',
    ...config,
  } as UseContractEventConfig<typeof izkMafiaGameABI, 'PlayerRoleAdded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVerifierABI}__.
 */
export function useSemaphoreVerifierRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semaphoreVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreVerifierABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreVerifierABI,
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semaphoreVerifierABI}__ and `functionName` set to `"verifyProof"`.
 */
export function useSemaphoreVerifierVerifyProof<
  TFunctionName extends 'verifyProof',
  TSelectData = ReadContractResult<typeof semaphoreVerifierABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof semaphoreVerifierABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semaphoreVerifierABI,
    functionName: 'verifyProof',
    ...config,
  } as UseContractReadConfig<
    typeof semaphoreVerifierABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkMafiaABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof zkMafiaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkMafiaABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    ...config,
  } as UseContractReadConfig<typeof zkMafiaABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"getGameInfoForGameId"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaGetGameInfoForGameId<
  TFunctionName extends 'getGameInfoForGameId',
  TSelectData = ReadContractResult<typeof zkMafiaABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkMafiaABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'getGameInfoForGameId',
    ...config,
  } as UseContractReadConfig<typeof zkMafiaABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof zkMafiaABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof zkMafiaABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, TFunctionName, TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"announceRole"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaAnnounceRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkMafiaABI,
          'announceRole'
        >['request']['abi'],
        'announceRole',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'announceRole'
      }
    : UseContractWriteConfig<typeof zkMafiaABI, 'announceRole', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'announceRole'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, 'announceRole', TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'announceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"createGame"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaCreateGame<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkMafiaABI,
          'createGame'
        >['request']['abi'],
        'createGame',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'createGame' }
    : UseContractWriteConfig<typeof zkMafiaABI, 'createGame', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createGame'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, 'createGame', TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'createGame',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"endGame"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaEndGame<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkMafiaABI,
          'endGame'
        >['request']['abi'],
        'endGame',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'endGame' }
    : UseContractWriteConfig<typeof zkMafiaABI, 'endGame', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'endGame'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, 'endGame', TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'endGame',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"joinGame"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaJoinGame<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkMafiaABI,
          'joinGame'
        >['request']['abi'],
        'joinGame',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'joinGame' }
    : UseContractWriteConfig<typeof zkMafiaABI, 'joinGame', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'joinGame'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, 'joinGame', TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'joinGame',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"privateRound"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaPrivateRound<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkMafiaABI,
          'privateRound'
        >['request']['abi'],
        'privateRound',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'privateRound'
      }
    : UseContractWriteConfig<typeof zkMafiaABI, 'privateRound', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'privateRound'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, 'privateRound', TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'privateRound',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"publicRound"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaPublicRound<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkMafiaABI,
          'publicRound'
        >['request']['abi'],
        'publicRound',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'publicRound'
      }
    : UseContractWriteConfig<typeof zkMafiaABI, 'publicRound', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'publicRound'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, 'publicRound', TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'publicRound',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"publishShuffle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaPublishShuffle<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkMafiaABI,
          'publishShuffle'
        >['request']['abi'],
        'publishShuffle',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'publishShuffle'
      }
    : UseContractWriteConfig<typeof zkMafiaABI, 'publishShuffle', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'publishShuffle'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, 'publishShuffle', TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'publishShuffle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"revealRoles"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaRevealRoles<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkMafiaABI,
          'revealRoles'
        >['request']['abi'],
        'revealRoles',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'revealRoles'
      }
    : UseContractWriteConfig<typeof zkMafiaABI, 'revealRoles', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'revealRoles'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, 'revealRoles', TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'revealRoles',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"startGame"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaStartGame<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof zkMafiaAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zkMafiaABI,
          'startGame'
        >['request']['abi'],
        'startGame',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'startGame' }
    : UseContractWriteConfig<typeof zkMafiaABI, 'startGame', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'startGame'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof zkMafiaABI, 'startGame', TMode>({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'startGame',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"announceRole"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaAnnounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, 'announceRole'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'announceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, 'announceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"createGame"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaCreateGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, 'createGame'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'createGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, 'createGame'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"endGame"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaEndGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, 'endGame'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'endGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, 'endGame'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"joinGame"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaJoinGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, 'joinGame'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'joinGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, 'joinGame'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"privateRound"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaPrivateRound(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, 'privateRound'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'privateRound',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, 'privateRound'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"publicRound"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaPublicRound(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, 'publicRound'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'publicRound',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, 'publicRound'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"publishShuffle"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaPublishShuffle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, 'publishShuffle'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'publishShuffle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, 'publishShuffle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"revealRoles"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaRevealRoles(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, 'revealRoles'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'revealRoles',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, 'revealRoles'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zkMafiaABI}__ and `functionName` set to `"startGame"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function usePrepareZkMafiaStartGame(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zkMafiaABI, 'startGame'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    functionName: 'startGame',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zkMafiaABI, 'startGame'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkMafiaABI}__.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof zkMafiaABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    ...config,
  } as UseContractEventConfig<typeof zkMafiaABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkMafiaABI}__ and `eventName` set to `"GameCreated"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaGameCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof zkMafiaABI, 'GameCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    eventName: 'GameCreated',
    ...config,
  } as UseContractEventConfig<typeof zkMafiaABI, 'GameCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkMafiaABI}__ and `eventName` set to `"PlayerRoleAdded"`.
 *
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x1A61839Eb5fC6eBBcAe01eD5E79062E598792Dac)
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x78991BB1D194C1235fe285240af8489CFA552151)
 * -
 */
export function useZkMafiaPlayerRoleAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof zkMafiaABI, 'PlayerRoleAdded'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof zkMafiaAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: zkMafiaABI,
    address: zkMafiaAddress[chainId as keyof typeof zkMafiaAddress],
    eventName: 'PlayerRoleAdded',
    ...config,
  } as UseContractEventConfig<typeof zkMafiaABI, 'PlayerRoleAdded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkMafiaGameABI}__.
 */
export function useZkMafiaGameRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof zkMafiaGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkMafiaGameABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: zkMafiaGameABI,
    ...config,
  } as UseContractReadConfig<typeof zkMafiaGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zkMafiaGameABI}__ and `functionName` set to `"getGameInfoForGameId"`.
 */
export function useZkMafiaGameGetGameInfoForGameId<
  TFunctionName extends 'getGameInfoForGameId',
  TSelectData = ReadContractResult<typeof zkMafiaGameABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zkMafiaGameABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zkMafiaGameABI,
    functionName: 'getGameInfoForGameId',
    ...config,
  } as UseContractReadConfig<typeof zkMafiaGameABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkMafiaGameABI}__.
 */
export function useZkMafiaGameEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof zkMafiaGameABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkMafiaGameABI,
    ...config,
  } as UseContractEventConfig<typeof zkMafiaGameABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkMafiaGameABI}__ and `eventName` set to `"GameCreated"`.
 */
export function useZkMafiaGameGameCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof zkMafiaGameABI, 'GameCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkMafiaGameABI,
    eventName: 'GameCreated',
    ...config,
  } as UseContractEventConfig<typeof zkMafiaGameABI, 'GameCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zkMafiaGameABI}__ and `eventName` set to `"PlayerRoleAdded"`.
 */
export function useZkMafiaGamePlayerRoleAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof zkMafiaGameABI, 'PlayerRoleAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zkMafiaGameABI,
    eventName: 'PlayerRoleAdded',
    ...config,
  } as UseContractEventConfig<typeof zkMafiaGameABI, 'PlayerRoleAdded'>)
}
